< 클래스 > (CarMain, {Handphone, HandphoneMain})

	- 모든 객체들의 생산처
	
	- 클래스 = 객체를 생성하는 틀
	
	- 프로그래밍이 쓰이는 목적을 생각하여 어떤 객체를 만들어야 하는지 결정한다.
	
	- 각 객체들이 어떤 특징(속성과 동작)을 가지고 있을지 결정한다.
	
	- 객체들 사이에서 메시지를 주고 받도록 만들어 준다.
	
	
	* 객체의 구성 : 속성(멤버변수), 동작(메소드)
	
	
	* 모양 : [접근제한자][활용제한자]class클래스명{ }	접근제한자 public / default
		  public static class Name{ }			활용제한자 final / static / abstract
	

-----------------------------------------------------------------------------------------------------------------------------

< 메소드 > (MethodMain, MethodMain01, {Method, MethodMain02})

	- 함수와 유사함

	* 모양 : [접근제한자][활용제한자] 반환형(리턴형) 메소드이름(파라미터/매개변수) { 문장 }
		 			void hi(int a){ }
			public static void main(String[] args){ }

								접근제한자 public / protected / default / private
								활용제한자 static / final / abstract / synchronized

	 * 메소드 오버로딩(overloading)	: 자신의 클래스에 메소드명은 동일하면서 "매개변수"의 개수 또는 자료형이 다른것
	
	

-----------------------------------------------------------------------------------------------------------------------------

< 생성자 >

	- 인스턴스객체가 만들어질때(new) 호출되는 메소드
	
	Method m = new Method();	// 호출됨


	* 생성자 정의 : 자료형 안붙고 클래스 이름과 같은 메소드명만으로 정의

			오버로딩 가능

			클래스에 생성자가 정의되지 않으면 자동으로 JVM이 내용이 없는 생성자메소드를 만듬 (디폴트 생성자)


		public class Method{
	
			Method(){
				System.out.println("생성자다!");
			}
		}

	- 주로 멤버변수값을 default값이 아닌 원하는 값으로 초기화 하기위해 사용
