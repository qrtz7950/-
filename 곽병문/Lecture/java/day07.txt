< 문자열 > (StringMain04. StringMain05, StringMain06)
	
	* [int] .indexOf(char) : 앞에서부터 원하는 글자가 문자열에서 몇번째에 있는지(배열) 반환	(못찾으면 음수)
		.indexOf(String)

	* [int] .lastIndexOf(char) : 뒤에서부터 ...
		.lastIndexOf(String)

	* [String] .valueOf(?) : ?를 String형으로 변환하여 반환

-----------------------------------------------------------------------------------------------------------------------------
< static > (stat - EmployeeMain, Employee)

	- 클래스당 하나의 메모리 공간만 할당 (변수공유) (전역변수와 유사)

	1. 로딩시점 : 클래스 로딩 시 (nonStatic은 객체 생성시에 됨)

	2. 메모리상의 차이 : 클래스당 하나 (nonStatic은 인스턴트 당 별돌로 할당)

	3. 사용상 차이 : 클래스 이름으로 접근 (nonStatic은 객체 생성후 객체 이름으로 접근)

-----------------------------------------------------------------------------------------------------------------------------
< 접근제한자 >

	- public : 모든 위치에서 접근이 가능(주로 메소드)
	
	- protected : 같은 패키지에서 접근이 가능, 다른 패키지 접근 불가능
		      단, 다른 패키지의 클래스와 상속관계가 있을 경우 접근 가능

	- default : 같은 패키지에서만 접근이 허용
		    접근제한자가 선언이 안되면 기본 적용
	
	- private : 자신 클래스에서만 접근이 허용 (주로 멤버변수)

-----------------------------------------------------------------------------------------------------------------------------
< 상속 > (extend - EmployeeMain, Employee, Manager)

	1. 확장성, 재 사용성

	2. 클래스 선언시 extends 키워드를 명시

	3. 관계
		- 부모(상위, Super) 클래스
		- 자식(하위, Sub) 클래스		// 자식은 부모클래스를 생성하고 그 둘을 모두 하나로 봄

	4. 자식 클래스는 부모 클래스에 선언되어있는 멤버변수, 메소드 사용가능(접근 제한자에 따라 달라짐)

	5. super키워드 : super클래스에서 선언된 멤버변수 사용할때 this처럼 사용