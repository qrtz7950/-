1교시

Final

final 변수 : 상수
final 메소드 : 오버라이딩 금지
final 클래스 : 상속

객체 지향의 특성을 가진 자바에서 내용물을 고치지 못하게 하기위해 클래스를 상속할수 없게하거나 메소드를 오버라이딩할 수 없게함
상속가능한 클래스는 오버라이딩이 가능하게 하여 기능을 위한 표준안을 만드는 개념이겟지만
내용물을 고칠 수 없게 final 을 이용할 수 있다

인터페이스는 추상메소드뿐만 아니라 구현된 메소드도 추가할 수 있다 그러나 이것은 모든 클래스에서 메소드를 쓰려는 것이 아니고
설계를 바꾸지 않고 메소드를 쓰기 위함이기 때문에 처음부터 default 키워드를 이용하여 메소드를 인터페이스에 구현하지는 않는다


package kr.co.mlec.day09;

/*final*/ class Super{ //final 붙일 시 상속불가
	void print() { //final 붙일 시 오버라이드 불가
		System.out.println("쑤퍼어어어어얼");
	}
}

class Sub extends Super{
	@Override
	void print() {
		System.out.println("써어어어어얼브");
	}
}

public class FinalMain {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

싱글톤 예제 실습

package kr.co.mlec.day09.singleton;

public class Dog {
	
	private static Dog instance = null;

	private Dog() {
		//생성자를 private로해서 생성자를 사용불가하게함
	}
	
	public static Dog getInstance() {
		//생성자를 사용할 수 없기 때문에 객체를 반환하는 메소드가 필요
		//객체도 생성할 수 없기때문에 static메소드와 static 멤버변수를 이용해야한다
		if(instance == null) { //지역변수가 아닌 스태틱 변수 사용
			instance = new Dog();
		}
		return instance;
	}
	
	//이렇게 클래스당 하나의 객체만을 만들고 싶을  때는 생성자를 private로 바꿔야한다
	//이것을 singleton 패턴이라고 한다
	//아래의 한줄로 위의 방법론을 요약가능하다
	//private static final Dog instance = new Dog();
	//자매품 팩토리 패턴
	
}

package kr.co.mlec.day09.singleton;

public class DogMain {

	public static void main(String[] args) {
//		Dog d = new Dog();
//		Dog d2 = new Dog();
		
		Dog d = Dog.getInstance();
		Dog d2 = Dog.getInstance();
		
		
		System.out.println(d);
		System.out.println(d2);
		//서로 다른 객체 다른 주소값을 가진다
		
		//하나의 객체만을 생성하여 사용하고 싶다면 어떻게하나
		//Dog 클래스를 이용해 만들어지는 객체는 언제나 한개인 걸로
		
	}

}
---------------------------------------------------------------------------------------------
3교시

멤버변수를 출력하는 메소드를 자동생성하는 편집기 기능 실습

----------------------------------------------------------------------------------------------

예외처리

중간에 문제가 생기면 종료되어야하나 종료되지 않고 계속 소프트웨어가 실행되도록하고싶다
이럴 때 예외처리를 사용한다
if와 else if를 이용하여 대부분의 오류들은 제어가 가능하나
개발자가 인지하지 못한 부분도 소프트 웨어가 자동으로 이것을 제어할수 있게하는것

절차지향과는 다르게 규모가 좀 큰 객체지향 프로그램에는 예외처리가 있다
예외가 발생하더라도 프로그램이 종료되지않고 나머지를 실행하는것

exception 과 error가 있는데 
개발자가 개발하면서 생기는 문제는 exception
소프트웨어의 문제로 프로그램이 종료되는것 error = 우리가 해결 불가

컴파일 시점의 에러를 checked exception이라고 한다
이 에러는 자바 문법에서 걸러진다

프로그램 실행시에 발생하는 예외는 실행시 예외다
우리가 겪는 대부분의 예외가 실행시 에러이다

예외 처리 관련 키워드
- try     //직접처리
- catch   //직접처리   //예외가 발생한 메소드에서 예와를 처리하면 직접 처리
- finally //직접처리
- throws  //간접처리   //예외가 발생한 메소드를 호출한 메소드에서 처리하면 간접처리
- throw   //사용자 정의 예외처리

예외가 발생한 메소드에서 예와를 처리하면 직접 처리
예외가 발생한 메소드를 호출한 메소드에서 처리하면 간접처리
예외 처리의 문장은 언제나 try catch final이지만 이 문장이 어디에 위치하는지에 따라
간접처리인지 직접처리인지 결정된다
예외발생한 메소드에 try catch final가 없을 때 이 예외처리 문장을 처리하기위해 throws가 필요하다

- try : 예외가 발생할 만한 코드를 기술하는 부분
- catch : try 블럭에서 예외가 발생하면 예외를 처리하는 부분
- finally : 예외 발생여부와 상관없이 무조건 실행하는 부분

----------------------------------------------------------------------------------------

5교시

예외처리 예제

JVM에 예외처리기가 따로 달려있어 직접 예외처리를 하지 않아도 JVM이 예외를 표시해줌









