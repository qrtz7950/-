자바에서 버퍼 비우기 sc.nextLine();

자바에서 스캐너는 입력장치가 버퍼에 쓴 내용을 가져온다

그러나 엔터로만 구분하기 때문에 여러개의 nextInt가 이어지면 공백으로 구분해서 한번에 넣을 수도 있다

ex) 
iceArr[i].price = sc.nextInt();
iceArr[i].price = sc.nextInt();
iceArr[i].price = sc.nextInt();

과 같은 코드가 있을 때

1200
3000
2000
이 아니라

1200 3000 2000으로 입력해도 메소드가 숫자의 시작부터 숫자의 끝인 1200을 처음의 메소드가 가져가고 다음의 3000을 다음 메소드가 가져간다

버퍼에 원하지 않는 내용이 남아 있어 좋지 않은 방법이다 엔터로만 입력을 구분하는 netxLine의 경우는 입력 후 버퍼가 비워지기 때문에

상관없지만 netInt,nextdouble과 같은 경우는 메소드 사용 후 nextline의 메소드를 한번 더 입력하여 버퍼를 비워줘야한다

ex)
System.out.print("아이스크림명: ");
iceArr[i].name = sc.next();
sc.nextLine();

System.out.print("아이스크림 가격: ");
iceArr[i].price = sc.nextInt();
sc.nextLine();

때문에 nextLine메소드 사용이 권장되지만 이는 문자열만 입력받을 수 있기 대문에 정수, 실수형이 필요하면
스트링 문자를 숫자로 바꿔주는 메소드가 필요하다

ex)Integer.parseInt(sc.nextLine)

를 이용해 문자열 입력을 인티저형으로 바꿀 수 있다

메소드 오버로딩은 같은 메소드 명에서 다른 기능을 가져 여러 메소드명을 외우지 않아도 사용할 수 있도록 사용도;ㄴ다


----------------------------------------------------------------------------------------------
5교시

생성자

인스턴스 객체를 생성할 때만 사용되면서 클래스와 같고 반환형이 없는 메소드

객체를 생설할 때 속성의 초기화를 담당하게한다 

인스턴트 객체 생성 후 값을 넣는 것이 아니라

객체를 생성하는 동시에 값을 넣을 수 있다

dog d = new Dog();
d.name = "쫑";
d.age = 3;

dog d2 = new Dog("메리",4);

클래스의 멤버변수를 초기화하기위해 사용한다 static 영역에서는 사용 불가

this라는 자기참조변수를 사용하여 내 객체를 호출할 수 있다.

객체는 보통 캡슐화로 외부에서 객체의 멤버변수의 이름를 감춰 보안성을 높인다

모든 객체의 멤버변수들은 은닉성이라는 특성을 가진다

외부에서 객체의 멤버변수에 접근할 수 없어야한다

-----------------------------------------------------------------------------
7교시

스트링 클래스는 한번 생성된 후에 변경되지 않기 때문에
수정하게되면 원래 메모리에 있던 문자열을 바꾸는 것이 아니라
새로운 메모리를 만들어 바뀐 문자열을 입력하게된다

그래서 변화가 많은 문자열은

StringBuffer나 StringBuilder 클래스를 사용한다

실제로 권고되는것은 동기화되지 않는 StringBuilder 클래스이다

둘의 차이는 나중에 배우도록하자

class명이 들어가면 new를 이용하여 새로운 객체를 만들었다

String s = "Hello";
String s2 = "Hello";
String s3 = "Hello";
String s4 = "Hello";

같은 헬로지만 s와 s3는 같은 공간의 Hello를 가리키지만
s2 s4는 새로운 공간을 각자 만들어 서로 다른 헬로를 가리킨다

s="abc";
s3="1234";

경우에는 각자 다른 공간의 abc 1234를 가리킨다

다시금

s="Hello";
s3="Hello";
를하면 새로운 공간의 hello가 아닌 다시 이전의 같은 hello를 가리킨다 (가비지 콜렉터가 이 공간을 정리하지않음)

new를 이용하지않고 만들어진 공간에 입력된 상수 문자열은 RAM의 STACK에 저장되기때문에 프로그램이 종료될때까지 남아있는다

가비지 콜렉터는 new를 이용해 만드는 공간만 정리한다

new를 이용하면 메모리 저장된 변수의 값으로 기억한다
new를 이용하여 않고 만들어진 문자열 사용하면 메모리 사용에 문제가 생기기때문에

new를 이용해 문자열을 만드는 것이 더 좋은 방법이다






