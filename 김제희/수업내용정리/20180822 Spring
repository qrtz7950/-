Servlet JSP를 이용한 사이트를 만들 때 성능 최적화에 도움을 주는 프레임웤

modle 1,2 MVC뭘 써도 화면단에 출력하는 코드는 다 같다 떄문에 이는 서블릿과 jsp를 분리시킬지 스프링만을 이용하는지 같은 방법의 차이이다

※ STS: 스프링 편집기

스프링은 외부의 jar파일들을 자동으로 다운받게되는데 이 경로를 찾기위해서 maven project를 사용하게된다

http://maven.apache.org/download.cgi

시스템정보 - 시스템 고급설정 - 환경변수 설정 - 시스템변수 - Path - D:\Lecture\apache-maven-3.5.4\bin 추가

바뀐 파일을 잘 보기 위해서 숨김처리되어 있는 폴더를 바꾸자

D:\Lecture\apache-maven-3.5.4\conf\settings.xml 의

  <!-- localRepository
   | The path to the local repository maven will use to store artifacts.
   |
   | Default: ${user.home}/.m2/repository
  <localRepository>/path/to/local/repo</localRepository>
  -->
  를 
  
    <!-- localRepository
   | The path to the local repository maven will use to store artifacts.
   |
   | Default: ${user.home}/.m2/repository -->
  <localRepository>D:/Lecture/maven-repository</localRepository>
  -->
  
  로 바꿔
  
  이클립스 window - preference - Maven - user settings - 방금바꾼 xml파일을 세팅으로 등록후 업데이트 세팅
  
  하면 로컬 리스포토리 경로가 내가 설정한 폴더로 바뀐다
  
  maven project 새로 만들기 creat simple project 체크
  
  group id : kr.co.mlec
  artifactid : Lecture-Spring
  
  그러면 이클립스가 뭘 다운받음  
  
  --------------------------------------------------------------
  
  만들어진 프로젝트에 패키지 형태의 4개의 src가 보이는데 사실은 아래 폴더의 src를 패키지 형태로 보여주는것 뿐 하나의 폴더다
  
  지금까지는 jar파일을 다운받거나 가져왔는데
  pom.xml에서 이를 원격으로 설정할 수 있다
  
src/main/java 소스파일 작성

src/main/resouces 자원파일 작성

이제 설정한 레스포토리 폴더를 보면 자동으로 생성된 폴더들이 있고 여기에 아직 스프링 관련 파일은 다운 받아져있지 않다

이를 다운 받기 위해 http://mvnrepository.com/ 로 이동

spring-context 검색 4.3.18 버젼의 메이븐이라고 써진곳에 xml을 가져오자

pom.xml에 

<dependencies>
  <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-context</artifactId>
	    <version>4.3.18.RELEASE</version>
	</dependency>
</dependencies>
  
추가하면 설정 폴더 안에 org라는 폴더가 추가로 생긴다 여기에 스프링 관련 파일이 자동으로 다운받아진다

이제부터는 내가 다운받아 수동으로 추가하는 것이 아니라

<dependencies></dependencies> 안에 추가하면 maven이 알아서 다운로드 및 관리를 해준다

이제 스프링 설치 끝난거임

---------------------------------------------------------------------------------------

DI의 제일 중요한 개념은 객체를 관리하는 것인데

dependency injection 의존 주입이라는 것이 제일 중요하다

지금까지는 필요할 때마다 필요한 객체를 만들어 썻지만

이제는 프로그램을 키면 객체가 자동 생성되어 다른 곳에 저장되고

필요로 할 때마다 만들어진 객체를 불러서 쓰게된다

이를 조립기? 라고 한다

---------Sping IOC? ----------------

Ioc (Inversion Of Control)

기존 : 인스턴스 생성 방법에 대한 부분을 개발자가 소스상에서 직접처리
Ioc: 인스턴스의 생명주기 관리를 개발자가 아닌 컨테이너가 처리함

컨테이너 : 스프링이 관리한다고 생각하자

내가 직접 만드는 것이 아닌 스프링이 내게 객체를 넘겨주는 것을 주입이라고 한다

그리고 내가 필요한 객체를 직접 만들지 않고 파라미터 방법으로 
외부에서 만들어진 객체를 주입하는 것을 의존 주입이라고 한다

DI(Dependency Inject)

Spring에서 Ioc를 제공하는 형태 중 하나  (DL DI) //DL지금 안씀

종류는 두 가지가 있다
Setter injection
construct injection

의존 : 객체간의 의존관계를 의미

----------------------------------
기존 코드 작성 방식

-필요한 위치에서 객체 생성
-인터페이스를 활용한 객체 생성
-별도의 조립기 클래스를 활용하여 객체 생성

****************************************
개선 방법

-Spring 에서 제공하는 DI활용
-개발자가 코드에서 직접 객체 생성하지 않는 방식
-XML 환경 설정파일 또는 어노테이션을 이용하여 객체를 주입

이제는 우리가 new라는 생성자를 볼 일이 없을것임

-----------------Container------------

Spring Container - 객체의 생성과 소멸을 (라이프 사이클) 담당함

-Spring 프레임 워크에서 Container 기능을 제공해 주는 클래스를 의미
- Container : bean 클래스를 관리(생성 삭제등)을 하는 주체
- Bean : Spring에서 관리되는 클래스 객체를 나타냄
- Cotainer 초기화 방법 설정정보 Xml파일을 읽고 Container에 로딩

Container 종류

BeanFactory
-XmlBeanFactory
ApplicationContext		 xml설정파일을 로딩하는 단순한 빈팩토리 
classPathXmlApplicationContext 	 클래스 패스
FileSystemXmlApplicationContext	 지정된 파일 경로
XmlWebApplicationContext

*******************************************************************

Spring XML 파일

Spring XML설정정보를 참조하여 여러가지 컨테이너 서비스를 제공
유지보수 작업시 XML파일을 조정

------Container - Bean-------
Bean 클래스

Spring 프레임 웤에 의해 LifeCycle이 관리되는 클래스
일반POJO 기반의 클래스(순수 자바로만 개발된다는 뜻)
XML에 <bean/> 태그를 이용하여 등록
<bean> 태그의 속성

id 	bean클래스를 식별하기 위한 이름 설정
name 	id 속성과 동일한 의미
class	bean클래스의 패키지명을 포함한 클래스명

---id와 name 속성의 차이---

둘이 비슷한데 거의 id씀 설정될 수 있는 값에 차이가 있음
id 속성은 자바 명명규칙을 따름
즉 숫자가 우선 할 수 없고 
/과 같은 특수 기호가 사용될 수 없음

-----------------------------------------------------------------------------------------

이제 컨터이너를 만들고 XML파일을 로딩하여 필요한 객체를 만드는법을 알아야 겠죠?

억떡계 객체를 만드는지 
































