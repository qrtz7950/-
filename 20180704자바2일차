2일차 1교시


package kr.co.mlec.day02;
	/*
	 * 형변환
	 * =(대입연산자)를 기준으로 좌우의 자료형의 타입이 서로 다를때 발생
	 * ex) A=B; 일때 A와 B의 자료형이 서로 다를때
	 * 형 변환은 기본자료형 8가지중 boolean형을 제외한 나머지에서 존재한다
	 * 
	 * 숫자의 범위
	 * 
	 * byte < short < int < ling < float < double
	 * 		 (char)
	 * 
	 * 종류 
	 * 1.묵시적형변환
	 * 	크기가 작은 타입이 값이 더 큰 자료형의 값으로 대입될 때 묵시적 형변환이다.
	 * 	EX) double num = int;
	 * 		long = byte;
	 * 	EX) 또한 연산자를 기준으로도 묵시적형변환이 일어난다
	 * 		int num01 = 3;
	 * 		double num02 = 2.2525;
	 * 		num01 + num02 = 5.2525;
	 * 2.강제적 형변환 or 명시적 형변환
	 * 	double num;
	 * 	int i = 20;
	 * 
	 * 	num = (doulbe) i;
	 * 	다음과 같은 형변환의 경우 (double)을 생략할 수 있다면 묵시적 형변환 생략할수 없다면 강제적 또는 명시적 형변환
	 */
public class CastMain {

	public static void main(String[] args) {
		double d;
		d = 10; //묵시적형변환 발생 double d = (double) int;
		System.out.printf("d: %f\n",d);
		
		int num;
		
		//num = 12.34; 형변환 int = double; = 에러
		num = (int)12.34;
		System.out.printf("num: %d\n",num);
		
		System.out.println((int)10.0/(int)3.0);
		System.out.println((int)(10.0/3.0));
		//나누기에서 나머지를 버린 몫의 값만 얻기 위해 형변환을 한 값을 출력하거나 계산한 값을 형변환했다
		
		
	}

}

지난 시간 이어서

기본자료형 8개 참조자료형은 무한대

문자를 저장하기위한 스트링이라는 클래스가 있었다.

ex)
double num;
num = 12.34;
num = 12;

= 기준으로 양 변의 자료형이 같아야한다 

기본자료형에서 형변환에는 두가지가 있다.

묵시적 형변환
강제적,명시적 형변환

참조자료형에서도 형변환이 있다.


package kr.co.mlec.day02;

public class ConstMain {

	public static void main(String[] args) {
		int radius = 10;
		final double PI = 3.14;		//변수를 상수처럼 사용하게 해주는 final 키워드
									//final키워드가 붙여진 변수는 대문자로 쓴다
		
		System.out.printf("원둘레는: " + (2 * radius * PI));
									//int * int * double
									//왼쪽부터 2개씩 계산하여 int * int = int
									// int * double = double
		
		//pi = 3.141592;
		//System.out.printf("원둘레는: " + (2 * radius * PI));
		//final키워드가 쓰였기 때문에 값을 바꾸려고 할 경우 오류가 난다
	}
}

final이라는 키워드는 해당 변수를 하나의 상수처럼 꾸준하게 하나의 값을 가지도록 초기화해준다
C에서 const

final 키워드는 변수 앞에 붙을 경우 초기화된 값으로 고정되게하지만
내가 어떻게 쓰는지에 따라 달라진다
클래스나 메소드앞에 붙게되면 다른 기능이 된다

이스케이프문자

문법적으로 나타내기 어려운 문자들을 나타내기위해 존재
\n, \t, \\, \', \"
= 엔터, 탭, \, ', " 

ex) System.out.println("\\\"");
    result = \"
    
-----------------------------------------------------------------------------
2교시

주석 /**/ //이 있다
문서 주석은 /** */이다

문서주석 생성해보았음

/**
 * oK?
 *@author 김제희
 */
 
 랜덤 정수 출력해보기
 
 package kr.co.mlec.day02;
import java.util.Random;

/*
 * Random class: 임의의 정수를 추출하는 기능하는 클래스
 * 사용하려는 Random class는 다른 패키지(package java.util;)에 있는 클래스이다 이를 사용하기 위해서 
 * import를 사용한다 import java.util.Random;를 입력하여 해당 패키지의 클래스를 사용할수 있도록한다
 * 
 * 
 */

public class RandomMain {

	public static void main(String[] args) {
		
		Random r = new Random(); //이건 기본으로 쓰는것
		//컨트롤 누르고 클래스에 마우스를 클릭 java\src를 연결
		
		int num = r.nextInt(); //임의의 정수를 추출하는 메소드
		System.out.printf("임의의 값 num: %d\n",num);
		
		// 0~9 사이의 정수를 추출하고싶다
		r.nextInt(10);
		//메소드 안에 매개변수 10을 넣으면 랜덤으로 추출된 값을 10으로 나눠 나오는 나머지 값 (0-9)
		
		num = r.nextInt(101); //0~100
		System.out.println("0~9사이의 임의의 값: "+ num);
		
		num = r.nextInt(100) + 1; //0+1~99+1 = 1~100
		System.out.println("1~100사이의 임의의 값: "+ num);
	}

}
 
 scanner 사용하여 키보드 입력을 변수 값에 대입하기
 
 package kr.co.mlec.day02;

import java.util.Scanner;

public class ScannerMain {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in); // System.out <-> System.in in은 키보드 입력
		//ctrl + shift + o = 자동 import
		
		System.out.print("실수 d 입력: ");
		double d = sc.nextDouble(); //메소드를 쓰는 형태는 외우자 
		System.out.println("d = " + d);
		
		System.out.print("정수 num 입력: ");
		int num = sc.nextInt(); //이건 외우자
		System.out.println("num = " + num);
		//이클립스 콘솔창에서 빨간색 네모가 프로그램이 아직 끝나지 않고 (브레이스를 만나지 않고) 실행중에 있다는 뜻
		//이클립스가 콘솔창의 커서를 스마트하게 옮겨주지 못하니 마우스로 커서를 가져다 놓자
	}

}
-------------------------------------------------------------------------
3교시

여러가지 자료형을 입력 받아보자

실제로는 스캐너 클래스를 사용할 때 정수건 실수건 문자건 문자열이던 각각에 맞는 nextInt()나 nextDouble()을 이용하지 않고
nextLine()을 사용하여 입력받도록 권고된다 에러가 나기때문인데 왜 나는지는 조금 나중에 배우도록하자
이 에러는 객체 지향언어에서는 공통적으로 일어나는데 이유는 나중에

자료형을 입력받아 보았다

연산자에 대한 이야기

-산술연산자 (+, -, *, /, %)

사칙연산자를 산술연산자라고 부른다 자바에서는 사칙연산자 4개말고 % 나머지연산자가 있다

나머지 연산자는 정수형에만 사용가능한 한정연산자라고한다

정수와 정수 연산 =정수
정수와 실수 연산 = 실수

더 큰 자료형으로 묵시형 변환된다

-증강 연산자 (++,--)

※int num;

num = num + 10; // num + 10을 num에 대입
                // num 두번쓰려니 귀찮아서 복합연산자 배정연산자를 사용하여
num += 10;      // 라고 표현된다 두개의 성능의 차이는 없다
하지만 어떤 값을 더해서 새로이 저장하는거 보다 1씩 증가하거나 감소하는 형태가 더 많이 쓰이는 것이 일반적이다 ex)인원수 카운트

num = num + 1;
num += 1;
num++;          //귀차니즘이 극에 달해서 증강연산자로 처리

증강연산자는 단항 연산자 이항 연산자가 있다

1. 단항연산자
    하나의 변수에 대해 연산하는 연산자
    ex) num++ 은 단항연산자의 증강연산자
2. 이항연산자
    두개의 변수에 대해 연산하는 연산자

a+b+c 나 a+b+c+d 같은 삼항 사항 연산도 잇을 수 있으나
컴퓨터의 연산에서는 a+b연산 후 (a+b)+c 와 같이 두개 씩 계산하므로 삼항 사항 연산이란 개념이 없다

++num과 num++중에 전자가 속도가 빠르나 요즘은 느낄수 없다
차이는 다른것과 결합될 때에 생긴다.

System.out.println(++num);을 보면 
1. ++증가해라
2. num을
즉 
num = num+1;
print(num);이다 //num=11이고 출력값도 11

System.out.println(num++);을 보면
1.print(num);
2.num = num+1; // num=11이나 출력값은 10

++num 전위증강연산자
num++ 후의증강연산자

int a = 5;
print a++   //5
print ++a   //7
print --a   //6
print a     //6
print a--   //6
print a++   //6

-논리연산자

기본자료형에서 참거짓을 도출하기 위해 사용됨

컴퓨터에서 논리연산자의 경우의 수는 4개가 아닌 3개

---------------------------------------------------------------------------------------------
5교시

논리연산 문제 예제

두개의 선택지중 둘다 거부할수도 둘다 선택할 수도 없을 때
하나의 선택지는 골라야한다라는 것은
ex)오늘 밥은 먹어야하는데 뭘먹을까
조건 ? 한식선택 : 일식선택;
조건 ? True:False;로 나타낼 수 있다
이것을 조건 연산자를 사용한다.

---------------------------------------------------------------------------------------------
6교시

제어문 if switch

제어를 가하는 것은 두가지가 있다
컴퓨터는 상하좌우로 일을 처리한다
그런데 이것을 조건에 따라 문장을 수행하게도 수행하지 않게도 한다는 것 = 조건문
조건에 따라 어떤 문장을 반복해서 수행하게하는것을 = 반복문 이라고한다.

C에서는 if와 스위치의 전환이 자유로웠으나
자바에서 if로 만든 모든 문장을 스위치로 만들 수는 없다
switch에 다른 조건이 있다는거죠

books if문

학교가기 스위치문

n개의 연산을 위해서는 n-1개의 연산자가 필요하다
제어문도 이와같이 n개의 문장을 분리시켜 제어하기 위해서는 조건식이 n-1개 필요하다
이를 어떻게 배치시키는지가 중요하다
n-1개의 조건식을 어떻게 배치하늕지가 중요한데 이를 위해 다중 if문 중첩if문이 등장한다

if(8시<=출발시간<8시15분)이라는 코드는 컴퓨터가 2개씩 계산하므로
출발시간 = 8시 5분;
(8<=출발시간) = true
true < 8시15분 //불린형 참거짓은 크기를 비교할수없기때문에 조건문을 예시처럼 쓰면안된다.

제어해야하는 문장이 많을 때 문장들의 조건들이 종속적이지 않고 서로 대등해 보이도록 배치하는 방법 else if

다중 if 와 중첩 if는 그 해석은 같으나 내가 제어하려는 문장들이 서로 대등하게 보이게 할수있다

조건문안에 문장이 하나일 경우에는 브레이스 생략이 가능하지만 이것은 권고되지 않는다

