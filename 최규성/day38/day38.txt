프록시 / 인터페이스 / 런타임을 기반으로 하는게 스프링



기존 OOP방식 한계

 중복되는 코드 발생: 복사 & 붙이기 
 지저분한 코드 : 핵심 기능 이외의 공통기능의 코드, 가독성이 떨어짐
 생산성/재활용의 저하


AOP

 여러가지 서비스에서 공통되는 부분을 전처리하여 각 서비스에
 관련된 사항만 실행시킬 수 있게 한다. 각 서비스(전처리 실행문구 없음)가 호출되었을시
 전처리 사항이 자동으로 실행후 서비스가 실행되는게 AOP기술이다


핵심기능(서비스)에 공통기능을 삽입하기위한 방법 3가지
1.컴파일 시점에 추가
2.클래스 로딩 시점에 바이트 코드에 추가
3.실행시에 프록시 객체를 생성해서 추가     <-AOP가 채택한 방법


SPRING AOP의 특징

 표준자바 클래스로작성
 런타임 시점에 어드바이스가 적용
 메소드단위의 조인포인트만 가능


어노테이션 기반 AOP

 XML 설정부분을 간소화 하기 위해 어노테이션을 활용하는 방식
 XML 문서에 어노테이션을 활용하기 위한 선언 필요
	- <aop:aspectj-autoproxy />
 클래스 위쪽에 @Aspect 선언


------------------------------------------------------
@Aspect와 JoinPoint를 쓰기 위해서 
http://mvnrepository.com/search?q=aspectj에서

AspectJ Weaver, Runtime에서 1.9.1의 코드를 복사해서
 pom.xml의 <dependencies>태그안에 붙여넣기한다

------------------------------------------------------

Pointcut 지시자

execution
 '~어느 시점에 ~~을 실행하겠다'의 의미





























