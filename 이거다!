# Function.py
'''
    1. def 키워드를 활용해 정의
    2. 선언부는 ':'로 종료
    3. 들여쓰기 주의
'''

print('====================================함수====================================')
def add(a, b) :
    return a + b
print(add(3,7))

# return
'''
    1. 함수의 종료와 반환값
    2. 객체 반환 시 tuple 사용
    3. return 단일 사용 시 None이 반
'''
# None 반환
def rtnNone() :
    return
print(rtnNone())

# 1개 반환
def maxNum(a, b) :
    if a > b :
        return a
    else :
        return b
print(maxNum(1,3))

# 2개 반환
def swap(a, b) :
    return b, a
#result = swap(3, 7)
#print(result, type(result)) # tuple 반환
c, d = swap(3, 7) # unpacking
print(c, d)

print('====================================호출방식====================================')
# parameter (callby)
#   Call By Value
#       : 값에 의한 호출 방식
#   Call By Reference
#       : 참조에 의한 호출 방식
def foo(val) :
    val = 20
a = 10
foo(a)
print(a)

def goo(val) :
    val = (1, 2, 3)
a = (4, 5, 6)
goo(a)
print(a)

def hoo(val) :
    val[0] = 0  # 전달된 list의 주소 참조
    val = [40, 50, 60] # 새로운 list 치환
a = [10, 20, 30]
hoo(a)
print(a)

print('====================================Scope====================================')
# Scope
#   Local Scope     : 함수 내부
#   Global Scope    : 모듈 내부
#   Built-in Scope  : 내장 영역
a = 10          # Global
def foo(b) :    # Local
    return a + b
print(foo(20))

a = 10          # Global
def goo(b) :
    a = 20      # Local
    return a + b    #우선순위 Local -> Global -> Built-in
print(a)
print(goo(30))

val = 0
def hoo() :
    #val = 10
    global val      # 함수 내부에서 Global Scope 선언, 선언과 동시에 초기화 불가
    val = 10
    print(val)
def goo() :
    #val = 20
    print(val)
hoo(); goo()

print(dir()) # 존재하는 Scope 확인
print(dir(__builtins__)) # Built-in Scope 확인

print('====================================parameter, arguments====================================')
# parameter, arguments
def foo(a, step=1):     # 고정값(기본값), 기본 인수
    return a + step
print(foo(5))
print(foo(5,2))

def goo(a, b) :
    print(a, b)
    return a + b
#print(goo(a=10, b=20))     # 키워드 인수
print(goo(b=20, a=10))      # 키워드 기준, 순서 상관 없음
#print(goo(a=10, c=20))     # 키워드 불일치!(존재 x)


# 가변 인수
def hoo(a, *b) :
    print(a, b)
hoo(1, 2, 3, 4)

# 정의되지 않은 키워드 인수 -> dict
def f(width, height, **data) :
    print(width, height, data)
f(10, 20, depth=10, dimension=3)        # 키워드 인수 전달 (함수에는 정의 x)
