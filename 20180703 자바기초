스케쥴12312312

1. 자바
2. 오라클
3. 자바 + 오라클 = 개인 or 팀 프로젝트
4. html & css
5. 자바스크립트 제이쿼리
6. servlet/jsp
7. ajax
8. spring + mybatis ★
9. 팀프로젝트
10. 리눅스 admin
11. 파이썬

자바개발
1.jdk

https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html

2.편집기는 이클립스

http://www.eclipse.org/downloads/eclipse-packages/

3. 폴더 생성

----------------------------------------------------------------------

2교시

절차지향 <-> 객체지향

잘차지향은 5천줄이 한계

프로세서의 발달로 한계가 있는 절차 지향 언어보다 객체 지향의 언어가 대세가됨

c++의 등장 그러나 이것은 반객체 지향적 언어

c++로는 객체지향적 프로그래밍은 어려웠다

-> 완전한 개체지향적 프로그래밍 언어인 java의 등장

완전한 객체 지향이라서 처음 진입 장벽이 높다

어렵긴한데 뭐가 좋다? 문법이 쉽다

우리나라도 c++이 대세였으나 java로 옮겨가는 추세다

자바가 가진 특징이 무엇이라 c++보다 좋은가?

아직도 예민한 시스템을 건들기 어렵고 느린 언어이지만

소프트웨어가 설치가 아닌 웹 기반으로 옮겨가면서 (패러다임이 바뀌면서) 웹기반 프로그램이 가능한 자바가 떠오르고있다

와! 자바! 와! 객체지향!

지금 웹프로그래밍 언어들이 자비 기반으로 만들어져있기 때문에 그것을 이해하기위해 자바를 배운다

자바가 다른 언어와 다른점 1번째

C는 하드웨어를 직접 건드릴 수 있는 언어라서 포인터 같은 이상한 걸 배워야되는데 자바는 그런게 없다!

자바가 다른 언어와 다른점 2번째

C는 리눅스, 유닉스, 맥, 윈도우 등 모든 os에서 개발이 가능하다 그러나 단점은 윈도우 기반에서 개발하면 리눅스에서는 작동불가, 유닉스에서는 작동 불가

그러나 자바는 os에 상관없이 수정할 필요 없이 동작한다 그러나 이것은 장점이자 단점인데 이 때문에 속도가 느리다



사람은 십진수 컴퓨터는 이진수 연산을 빠르게 하기 위해서 이진수 사용

컴퓨터에게 이걸 말하기 위해서 10진수 언어 <-> 2진수 언어로 바꿔주는 명렁해석기 컴파일러와 인터프리터가 필요하다

처음에는 인터프리터엿으나 1970년부터 컴파일러만 살아남음 이유는 보안 때문에

컴파일러는 원본을 보고 컴퓨터가 이해할 수 있는 번역본만 가지고 있는것

10진수를 보고 2진수로 만든 파일(오브젝트 파일)만을 가지고있음 원본이 안전하기때문에 보안면에서 우수

point. 보안에 우수

인터프리터는 원본만이 존재 보안면에서 취약하나 변환 과정이 필요 없기때문에 속도면에서 우수

내용을 수정해야할 필요가 있을 때 컴파일러는 번역된 파일을 계속 바꿔줘야하나 인터프리터는 원본 그대로를 수정하면 되기 때문에 편-안

point. 변화에 민감하지않다

자바는 모든 os에서 동적으로 만들기 위해서 인터프린터와 컴파일러를 같이 쓴다

보안을 위해 먼저 자바 코드를 바이트 코드로 컴파일한다

이 바이트 코드를 os에서 인터프리터로 읽으면 실행이 가능해진다 JVM(java virtual machine)

컴파일 - 인터프리터 과정을 둘다 거쳐야하기 때문에 매우 느렸다

point. Hello.java ->(컴파일러)-> Hello.class -> bytecode
                                     ㅣ
                                    JVM
                                    ㅣ
                                ㅡㅡㅡㅡㅡㅡㅡ
                               ㅣ    ㅣ     ㅣ 
                               win   mac   unix


헬로 자바를 자바가 자동으로 헬로 클래스로 자동변환 후 (컴파일)

JVM에서 인터프리터로 읽는다

이클립스를 키자---------------------

프로젝트를 만들 때

프로그램 하나마다 프로젝트를 하나만들어도 되고

소스코드 하나마다 프로젝트를 만들어도 된다

javaSE-1.8 버젼 사용

이클립스로 프로젝트를 만들면

bin, src 폴더 두개를 만들어 준다

10진수 코드를 만들면 .java

이것을 컴파일해서 바이트코드 파일이면 .class 확장자를 가진다

이클립스는 이것을 폴더로 관리하는데

.java 파일은 src .class 파일은 bin 폴더에 저장된다

우리가 소스코드를 짜면 이클립스가 자동으로 컴파일 해준다 그래서 우리는 class 파일은 볼 필요 없다

그래서 이클립스 패키지 탐색기에서는 src 폴더만이 보인다

-------------------------------------------------------------------------

3교시

Hello.java

class Hello{
}

자바 파일명 첫문자는 대문자(권고사항)

클래스명과 자바 파일명과 동일해야함

객체 지향적 언어는 class가 기본이 된다.

여러개의 .java파일이 존재할 때

동명의 클래스 명이 존재해도 다른 클래스로 인식하기위해 클래스와 클래스를 구분하기 위해

패키지명을 포함한 클래스명으로 구분한다

패키지는 3레벨이상으로 만드는 것이 좋다 ex) A.B.C

패키지명의 . 하나하나마다가 폴더 구분 A\B\C

대부분의 회사는 도메인명을 거꾸로 쓴다 ex) kr.co.bit

도메인을 거꾸로 쓰면 소속기관 지역 회사등 폴더 관리가 용이해지기때문

카멜 표기법에 따라서 서로 다른 단어일 때 첫 문자를 대문자로 ex)HelloMain

brace: {}

kr.co.mlec 패키지를 생성 HelloMain 클래스를 생성했다

이클립스가 자동으로 컴파일하여 bin폴더 안에 컴파일덴 Hello.class 파일을 생성했다

프로그램의 시작과 끝을 알려주는 문법이 필요 (메소드가 필요)

aaa() = aaa 메소드

메인 메소드

public static void main(String[] args)

하나의 문장이 끝날때는 세미콜론

HelloWorld를 출력하는 간단한 코드를 작성해보자

package kr.co.mlec;

public class HelloMain {
	public static void main(String[] args) {
		System.out.println("Hello World!");
	}
}

코드에 주석을 달기 위해서는 두 가지가 사용된다

일정부분을 주석처리하기 위해서는 /* */
한줄만 주석처리하기 위해서는 //






