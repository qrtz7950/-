스케쥴

1. 자바
2. 오라클
3. 자바 + 오라클 = 개인 or 팀 프로젝트
4. html & css
5. 자바스크립트 제이쿼리
6. servlet/jsp
7. ajax
8. spring + mybatis ★
9. 팀프로젝트
10. 리눅스 admin
11. 파이썬

자바개발
1.jdk

https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html

2.편집기는 이클립스

http://www.eclipse.org/downloads/eclipse-packages/

3. 폴더 생성

----------------------------------------------------------------------

2교시

절차지향 <-> 객체지향

잘차지향은 5천줄이 한계

프로세서의 발달로 한계가 있는 절차 지향 언어보다 객체 지향의 언어가 대세가됨

c++의 등장 그러나 이것은 반객체 지향적 언어

c++로는 객체지향적 프로그래밍은 어려웠다

-> 완전한 개체지향적 프로그래밍 언어인 java의 등장

완전한 객체 지향이라서 처음 진입 장벽이 높다

어렵긴한데 뭐가 좋다? 문법이 쉽다

우리나라도 c++이 대세였으나 java로 옮겨가는 추세다

자바가 가진 특징이 무엇이라 c++보다 좋은가?

아직도 예민한 시스템을 건들기 어렵고 느린 언어이지만

소프트웨어가 설치가 아닌 웹 기반으로 옮겨가면서 (패러다임이 바뀌면서) 웹기반 프로그램이 가능한 자바가 떠오르고있다

와! 자바! 와! 객체지향!

지금 웹프로그래밍 언어들이 자비 기반으로 만들어져있기 때문에 그것을 이해하기위해 자바를 배운다

자바가 다른 언어와 다른점 1번째

C는 하드웨어를 직접 건드릴 수 있는 언어라서 포인터 같은 이상한 걸 배워야되는데 자바는 그런게 없다!

자바가 다른 언어와 다른점 2번째

C는 리눅스, 유닉스, 맥, 윈도우 등 모든 os에서 개발이 가능하다 그러나 단점은 윈도우 기반에서 개발하면 리눅스에서는 작동불가, 유닉스에서는 작동 불가

그러나 자바는 os에 상관없이 수정할 필요 없이 동작한다 그러나 이것은 장점이자 단점인데 이 때문에 속도가 느리다



사람은 십진수 컴퓨터는 이진수 연산을 빠르게 하기 위해서 이진수 사용

컴퓨터에게 이걸 말하기 위해서 10진수 언어 <-> 2진수 언어로 바꿔주는 명렁해석기 컴파일러와 인터프리터가 필요하다

처음에는 인터프리터엿으나 1970년부터 컴파일러만 살아남음 이유는 보안 때문에

컴파일러는 원본을 보고 컴퓨터가 이해할 수 있는 번역본만 가지고 있는것

10진수를 보고 2진수로 만든 파일(오브젝트 파일)만을 가지고있음 원본이 안전하기때문에 보안면에서 우수

point. 보안에 우수

인터프리터는 원본만이 존재 보안면에서 취약하나 변환 과정이 필요 없기때문에 속도면에서 우수

내용을 수정해야할 필요가 있을 때 컴파일러는 번역된 파일을 계속 바꿔줘야하나 인터프리터는 원본 그대로를 수정하면 되기 때문에 편-안

point. 변화에 민감하지않다

자바는 모든 os에서 동적으로 만들기 위해서 인터프린터와 컴파일러를 같이 쓴다

보안을 위해 먼저 자바 코드를 바이트 코드로 컴파일한다

이 바이트 코드를 os에서 인터프리터로 읽으면 실행이 가능해진다 JVM(java virtual machine)

컴파일 - 인터프리터 과정을 둘다 거쳐야하기 때문에 매우 느렸다

point. Hello.java ->(컴파일러)-> Hello.class -> bytecode
                                     ㅣ
                                    JVM
                                    ㅣ
                                ㅡㅡㅡㅡㅡㅡㅡ
                               ㅣ    ㅣ     ㅣ 
                               win   mac   unix


헬로 자바를 자바가 자동으로 헬로 클래스로 자동변환 후 (컴파일)

JVM에서 인터프리터로 읽는다

이클립스를 키자---------------------

프로젝트를 만들 때

프로그램 하나마다 프로젝트를 하나만들어도 되고

소스코드 하나마다 프로젝트를 만들어도 된다

javaSE-1.8 버젼 사용

이클립스로 프로젝트를 만들면

bin, src 폴더 두개를 만들어 준다

10진수 코드를 만들면 .java

이것을 컴파일해서 바이트코드 파일이면 .class 확장자를 가진다

이클립스는 이것을 폴더로 관리하는데

.java 파일은 src .class 파일은 bin 폴더에 저장된다

우리가 소스코드를 짜면 이클립스가 자동으로 컴파일 해준다 그래서 우리는 class 파일은 볼 필요 없다

그래서 이클립스 패키지 탐색기에서는 src 폴더만이 보인다

-------------------------------------------------------------------------

3교시

Hello.java

class Hello{
}

자바 파일명 첫문자는 대문자(권고사항)

클래스명과 자바 파일명과 동일해야함

객체 지향적 언어는 class가 기본이 된다.

여러개의 .java파일이 존재할 때

동명의 클래스 명이 존재해도 다른 클래스로 인식하기위해 클래스와 클래스를 구분하기 위해

패키지명을 포함한 클래스명으로 구분한다

패키지는 3레벨이상으로 만드는 것이 좋다 ex) A.B.C

패키지명의 . 하나하나마다가 폴더 구분 A\B\C

대부분의 회사는 도메인명을 거꾸로 쓴다 ex) kr.co.bit

도메인을 거꾸로 쓰면 소속기관 지역 회사등 폴더 관리가 용이해지기때문

카멜 표기법에 따라서 서로 다른 단어일 때 첫 문자를 대문자로 ex)HelloMain

brace: {}

kr.co.mlec 패키지를 생성 HelloMain 클래스를 생성했다

이클립스가 자동으로 컴파일하여 bin폴더 안에 컴파일덴 Hello.class 파일을 생성했다

프로그램의 시작과 끝을 알려주는 문법이 필요 (메소드가 필요)

aaa() = aaa 메소드

메인 메소드

public static void main(String[] args)

하나의 문장이 끝날때는 세미콜론

HelloWorld를 출력하는 간단한 코드를 작성해보자

package kr.co.mlec;

public class HelloMain {
	public static void main(String[] args) {
		System.out.println("Hello World!");
	}
}

코드에 주석을 달기 위해서는 두 가지가 사용된다

일정부분을 주석처리하기 위해서는 /* */
한줄만 주석처리하기 위해서는 //

----------------------------------------------------------------------------------------------
5교시
package kr.co.mlec;

/* 20180703
 * 역시 시작은 HelloWorld지
 * When i wrote this code only God and I understood what i was doing
 * now only god knows
 */
public class HelloMain {
	public static void main(String[] args) {
		// println() 메소드는 ""안의 내용을 출력하는 명령어
		System.out.println("Hello World!");
		System.out.println("안니어어어어ㅓㅓㅓ엉");
		
	}
}

코드를 짤 때는 public 이나 static의 위치를 바꿔도 된다
ex)static public void main

메인 메소드 안도 순서 바꿔도 된다
ex)public static void main(String args[])

※WORA: write once run anywhere

출력메소드
print
println
printf의 차이를 알아보자

세 개의 메소드 모두 쌍따옴표 안의 내용을 출력하는 메소드이다
System.out.print()	개행문자를 포함하지않음
System.out.println()	개행문자 포함 ln:line의 약자
System.out.printf()	개행문자를 포함하지않음, 변환문자를 사용(%c, %d, %x, %o, %f, %d) JDK 1.5이후부터 사용가능

사용자가 컴퓨터를 통해 전달할 수 있는 상수 값은 4가지가 있다 
4가지 상수: 정수 실수 문자 문자열
ex)
정수표현	print(3)
실수표현	print(3.14)
문자표현	print('A') //문자열은 작은 따옴표
문자열표현	print("ABC")

%c: 문자
%d: 정수
%f: 실수
%s: 문자열

자바는 아스키코드 기반이 아닌 유니코드 기반의 언어이기때문에 가 와 같은 한글도 하나의 문자로 인식한다 ex) print('가')

package kr.co.mlec.day1;

/*
 * 출력메소드에는
 * System.out.print()
 * System.out.println()
 * System.out.printf()
 * 세 개의 메소드 모두 쌍따옴표 안의 내용을 출력하는 메소드이다
 * 다른 점을 알아보자
 */

public class PrintMain {

	public static void main(String[] args) {
		System.out.println(3);		//정수
		System.out.println(3.14);	//실수
		System.out.println("ABC");	//문자열
		System.out.println('A');	//문자
		//printf() 메소드는 개행문자를 포함하지않음, 변환문자를 사용(%c, %d, %x, %o, %f, %d) JDK 1.5이후부터 사용가능
		System.out.printf("%c\n", 'A');
		System.out.printf("%d\n", 3);
		System.out.printf("%.2f\n", 3.14);
		System.out.printf("%s\n", "ABC");
		System.out.printf("문자: %s 정수: %d\n", "ABC" , 3);
		//printf() 메소드를 잘 이용하면 한줄에 여러 자료형을 출력가능하다
		//자바에서 더하기 연산은 다른 타입의 자료형도 자동으로 변환해준다
		System.out.printf("문자: " + 'A' + ", 정수: " + 3 +"\n");
		//문자:A, 정수:3
		System.out.println('A'+"BC");	//ABC
		System.out.println(3 + 4);		//7
		System.out.println(2.3 + 5);	//7.3
		System.out.println('A' + 'B');	// 131
		// 문자끼리의 더하기 연산은 아스키코드값을 더한 값으로 표현된다 A+B = 131 A=65 B=66
		// 자바는 유니코드 기반의 언어이다
		System.out.println('\u0041');	//A
		// 1 + 2 = 3을 표현해보자
		System.out.println(1 + "+" + 2 + "=" +1+2); //1+2=12
		//자바에서 연산은 왼쪽에서부터 두개씩 계산하기때문에 첫번째 계산 1 과 +를 더하면 string형으로 변환된다
		//이후의 계산도 모두 string형이 되기 때문에 결과값이 12가 나오게된다
		System.out.println(1 + "+" + 2 + "=" + (1+2)); //1+2=3
		// 1+2 연산을 먼저실행해서 3으로 나오게할수있다
		System.out.printf("%d + %d = %d\n",1 ,2 ,3); //1+2=3
		// 변환문자를 이용하여 좀더 간단하게 표현 가능하다
		System.out.println("[    A]");
		//****A
		System.out.println("[   12]\n\n");
		//***12
		//앞에 공백 맞추기가 너무 어렵네요 쉽게 해봅시다
		System.out.printf("[%5c]\n", 'A');
		System.out.printf("[%5d]\n", 12);
		//[    A]
		//[   12]
		System.out.printf("[%-5c]\n", 'A');
		System.out.printf("[%-5d]\n", 12);
		//[A    ]
		//[12   ]
		System.out.printf("%f\n", 3.23); // 3.230000
		System.out.printf("%.2f\n", 3.23); // 3.23
		//소수점 자리 제한 가능
	}
}

----------------------------------------------------------------------------------------------
6교시

package kr.co.mlec.day1
import java.util.*;
클래스 선언부
class Hello{클래스 내용부
	class{} // 클래스 안에 클래스는 이너 클러스
}
클래스 위에 써지는 부분은 클래스 선언부
클레스의 브레이스 안에는 클래스 내용부

★식별자 
1.클래스: 단어의 첫 글자를 대문자로 표기 만약 여러 개의 단어로 이루어져 있다면 각 단어의 첫글자를 대문자로 표기 //카멜표기법
ex) Hello HelloWorld BoradMng
2.멤버변수,메소드 단어의 첫글자를 소문자로 표기 만약 여러개의 단어로 이루어져 있다면 각 단어의 첫글자를 대문자로 표기
ex) name, cnt, main(), printName()
3.상수 모든 단어를 대문자로 표기 만약 여러개의 단어로 이루어져 있다면 단어와 단어사이를 '_'언더바로 구분한다
ex) MAX, MIN, MAX_VALUE

package kr.co.mlec.day1;

/*
 * 네이밍률에 의거하여 클래스,변수,메소드의 개수를 구하시요
 */

public class NamingMain {

	public static void main(String[] args) {
		int i = Integer.parseInt("345");
		System.out.println(i);
		/*
		 *클래스의 개수 = 4개 (NamingMain, String, Integer, System) 
		 *변수의 개수 = 3개 (i, args, out)
		 *메소드의 개수 = 3 (main() parseInt() println())
		 *자줏빛으로 보이는 단어들은 예약어라고한다 (public static void)
		 */
	}

}

변수
-데이터를 저장할 메모리의 위치를 나타내는 이름
-메모리상에 데이터를 보관할 수 있는 공간을 확보
-적절한 메모리공간을 확보하기 위해서 변수의 타입 등장
-'='니콜을 통해서 cpu에게 연산작업을 의뢰

우리가 여기서 쓰는 메모리는 RAM (Random Access Memory)

32비트 컴퓨터 기준으로 4기가램 장착 가능
system 영역 2G
user 영역 2G
우리가 사용하는 공간의 user영역

user영역의 램은 다시 3가지로 나뉜다
static
HEAP: 실제로 제일 많이 사용하는 공간 객체 지향 프로그래밍언어에서 제일 많이 사용하게됨
stack: 전체중에 1메가바이트만 사용가능

▤와 같은 메모리 공간에서
.□
.□
.□
.□
컴퓨터는 메모리의 시작점의 주소(.)만을 기억한다

변수마다 저장하는 자료가 다르다 실수 정수 문자 문자열
그래서 변수를 만들 때 이 변수가 어떤 용도로 사용되는지 선언해야한다
그거시 바로 자료형이다

이 변수에 얼마만큼의 용량(단위:바이트)을 할당할 것인가를 자료형으로 결정할 수 있다
사람과 사람사이에 통신을 위해 사용되는 최소단위는 바이트
컴퓨터와 컴퓨터 사이의 최소단위는 비트
1 byte = 8 bit
----------------------------------------------------------------------------------------------------------
7교시


